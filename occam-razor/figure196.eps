%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.86e Copyright 2001 Radical Eye Software
%%Title: /home/mackay/itp/figures.dvi
%%BoundingBox: 199 501 421 716
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -p 196 -l 196 /home/mackay/itp/figures.dvi
%+ -o /home/mackay/itp/pub/individual/figure196.eps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.10.07:0148
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 40258437 52099154 1000 600 600
(/home/mackay/itp/figures.dvi) @start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin

%%EndSetup
196 0 bop 1081 56 a
 14208860 13782590 0 0 27102085 26510049 startTexFig
 1081 56 a
%%BeginDocument: figs/dogs.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dogs.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3c
%%CreationDate: Tue Dec 24 15:28:16 2002
%%For: mackay@jura (David J.C. MacKay)
%%Magnification: 1.0000
%%BoundingBox: 199 501 421 716
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.900 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 403 moveto 0 0 lineto 412 0 lineto 412 403 lineto closepath clip newpath
-80.0 478.0 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% small fishscales
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 16 16 true [ 16 0 0 -16 0 16 ]
	{<008000800080014001400220
	0c187007c001800080004001
	40012002180c0770>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P17 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
%%Page: 1 1
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
% Polyline
7.500 slw
n 1350 1275 m 8175 1275 l 8175 7950 l 1350 7950 l
 cp gs col3 0.95 shd ef gr gs col0 s gr 
% Polyline
n 1650 7050 m 2100 7050 l 2100 7950 l 1650 7950 l
 cp gs col7 0.75 shd ef gr gs col0 s gr 
% Polyline
n 2850 7950 m 4950 7950 l 4950 7200 l 2850 7200 l
 cp gs col7 0.65 shd ef gr gs col0 s gr 
% Polyline
n 3600 7950 m 4650 7950 l 4650 6300 l 3600 6300 l
 cp gs col7 0.15 shd ef gr gs col0 s gr 
% Polyline
n 1800 7500 m 2550 7500 l 2550 7950 l 1800 7950 l
 cp gs col7 0.50 shd ef gr gs col0 s gr 
% Polyline
n 5400 7050 m 6750 7050 l 6750 7950 l 5400 7950 l
 cp gs col7 0.80 shd ef gr gs col0 s gr 
% Polyline
n 7050 6900 m 7650 6900 l 7650 7950 l 7050 7950 l
 cp gs col7 0.15 shd ef gr gs col0 s gr 
% Polyline
n 5700 7950 m 6150 7950 l 6150 3900 l 5700 3900 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
2 slj
n 4100 2350 m 4085 2366 l 4071 2383 l 4059 2401 l 4048 2420 l 4039 2440 l
 4031 2461 l 4024 2483 l 4019 2506 l 4015 2529 l 4012 2553 l
 4011 2578 l 4012 2603 l 4013 2628 l 4016 2654 l 4020 2679 l
 4025 2705 l 4032 2730 l 4039 2754 l 4047 2778 l 4056 2801 l
 4066 2824 l 4077 2845 l 4088 2866 l 4100 2887 l 4112 2906 l
 4125 2925 l 4141 2947 l 4158 2967 l 4175 2988 l 4194 3008 l
 4212 3028 l 4231 3048 l 4250 3067 l 4269 3086 l 4288 3106 l
 4306 3124 l 4322 3143 l 4338 3161 l 4352 3179 l 4364 3197 l
 4374 3214 l 4381 3231 l 4387 3247 l 4390 3263 l 4390 3279 l
 4388 3294 l 4383 3309 l 4375 3325 l 4367 3337 l 4356 3350 l
 4344 3363 l 4330 3376 l 4314 3390 l 4296 3404 l 4276 3418 l
 4254 3433 l 4231 3448 l 4205 3464 l 4178 3480 l 4149 3496 l
 4118 3512 l 4087 3528 l 4054 3545 l 4021 3562 l 3986 3578 l
 3951 3595 l 3916 3611 l 3880 3627 l 3845 3644 l 3809 3659 l
 3774 3675 l 3739 3690 l 3704 3705 l 3669 3720 l 3634 3735 l
 3600 3750 l 3566 3765 l 3531 3780 l 3496 3795 l 3462 3810 l
 3427 3825 l 3392 3841 l 3356 3857 l 3322 3873 l 3287 3890 l
 3253 3906 l 3219 3923 l 3186 3940 l 3154 3958 l 3124 3975 l
 3094 3992 l 3067 4010 l 3041 4027 l 3017 4044 l 2995 4060 l
 2975 4077 l 2958 4093 l 2942 4109 l 2929 4125 l 2919 4140 l
 2911 4155 l 2905 4170 l 2901 4185 l 2900 4200 l 2901 4215 l
 2905 4230 l 2911 4244 l 2919 4259 l 2929 4274 l 2942 4289 l
 2957 4304 l 2975 4319 l 2994 4334 l 3016 4349 l 3039 4363 l
 3064 4377 l 3092 4391 l 3120 4404 l 3150 4417 l 3181 4429 l
 3213 4440 l 3245 4450 l 3278 4459 l 3312 4468 l 3345 4475 l
 3379 4482 l 3412 4487 l 3445 4492 l 3478 4495 l 3511 4498 l
 3543 4499 l 3575 4500 l 3605 4500 l 3634 4498 l 3664 4496 l
 3694 4493 l 3725 4489 l 3756 4484 l 3787 4479 l 3818 4472 l
 3850 4465 l 3882 4457 l 3915 4449 l 3948 4439 l 3981 4429 l
 4014 4419 l 4047 4408 l 4079 4396 l 4112 4384 l 4145 4372 l
 4177 4360 l 4209 4347 l 4240 4335 l 4271 4322 l 4301 4309 l
 4331 4297 l 4360 4284 l 4389 4272 l 4417 4260 l 4445 4248 l
 4472 4237 l 4500 4225 l 4532 4212 l 4564 4199 l 4596 4186 l
 4628 4173 l 4661 4161 l 4694 4149 l 4727 4137 l 4760 4126 l
 4793 4115 l 4826 4104 l 4859 4095 l 4891 4086 l 4922 4078 l
 4953 4071 l 4982 4064 l 5010 4059 l 5036 4055 l 5061 4053 l
 5085 4051 l 5106 4051 l 5126 4052 l 5145 4054 l 5161 4057 l
 5176 4062 l 5189 4068 l 5200 4075 l 5211 4085 l 5221 4098 l
 5228 4112 l 5234 4128 l 5238 4147 l 5241 4167 l 5242 4190 l
 5241 4214 l 5239 4240 l 5237 4267 l 5233 4296 l 5228 4325 l
 5223 4356 l 5217 4386 l 5211 4417 l 5205 4448 l 5199 4479 l
 5193 4509 l 5188 4539 l 5183 4568 l 5179 4597 l 5175 4625 l
 5172 4653 l 5170 4681 l 5169 4709 l 5169 4737 l 5170 4764 l
 5171 4792 l 5174 4819 l 5177 4846 l 5181 4873 l 5186 4898 l
 5192 4922 l 5199 4945 l 5207 4967 l 5215 4987 l 5224 5005 l
 5233 5021 l 5243 5035 l 5254 5047 l 5265 5057 l 5276 5065 l
 5288 5071 l 5300 5075 l 5313 5077 l 5326 5077 l 5340 5076 l
 5355 5072 l 5371 5067 l 5388 5059 l 5405 5050 l 5424 5038 l
 5443 5025 l 5462 5010 l 5482 4994 l 5502 4976 l 5523 4957 l
 5543 4936 l 5564 4915 l 5584 4893 l 5604 4870 l 5624 4847 l
 5643 4823 l 5662 4799 l 5681 4775 l 5700 4750 l 5717 4727 l
 5735 4703 l 5752 4679 l 5770 4654 l 5788 4629 l 5806 4604 l
 5825 4578 l 5844 4553 l 5863 4528 l 5883 4503 l 5902 4479 l
 5922 4456 l 5941 4434 l 5960 4414 l 5978 4396 l 5997 4379 l
 6015 4364 l 6032 4352 l 6049 4341 l 6065 4333 l 6081 4328 l
 6096 4324 l 6111 4323 l 6125 4325 l 6138 4329 l 6151 4335 l
 6164 4342 l 6178 4352 l 6191 4364 l 6205 4378 l 6220 4394 l
 6235 4412 l 6250 4431 l 6266 4452 l 6282 4474 l 6300 4497 l
 6317 4521 l 6336 4546 l 6355 4571 l 6374 4596 l 6394 4622 l
 6414 4647 l 6435 4672 l 6457 4696 l 6479 4720 l 6502 4743 l
 6525 4765 l 6549 4786 l 6574 4806 l 6600 4825 l 6623 4841 l
 6648 4856 l 6673 4870 l 6699 4884 l 6727 4897 l 6756 4909 l
 6785 4921 l 6816 4933 l 6847 4943 l 6880 4953 l 6913 4962 l
 6947 4970 l 6981 4978 l 7015 4985 l 7050 4990 l 7085 4995 l
 7119 4999 l 7153 5002 l 7187 5005 l 7220 5006 l 7253 5007 l
 7284 5006 l 7315 5005 l 7344 5003 l 7373 5000 l 7401 4997 l
 7427 4992 l 7452 4987 l 7477 4982 l 7500 4975 l 7526 4967 l
 7551 4957 l 7575 4947 l 7598 4935 l 7620 4922 l 7641 4909 l
 7661 4894 l 7681 4878 l 7699 4861 l 7717 4844 l 7733 4825 l
 7748 4806 l 7762 4786 l 7774 4766 l 7786 4745 l 7796 4725 l
 7804 4704 l 7811 4683 l 7817 4662 l 7822 4641 l 7825 4621 l
 7827 4601 l 7828 4582 l 7828 4563 l 7827 4544 l 7825 4525 l
 7821 4501 l 7815 4477 l 7808 4453 l 7799 4429 l 7789 4405 l
 7778 4380 l 7766 4356 l 7754 4331 l 7741 4306 l 7728 4282 l
 7716 4258 l 7704 4234 l 7692 4212 l 7682 4190 l 7673 4169 l
 7665 4148 l 7658 4129 l 7654 4110 l 7651 4092 l 7650 4075 l
 7651 4056 l 7655 4037 l 7660 4018 l 7668 3999 l 7677 3980 l
 7688 3960 l 7699 3940 l 7712 3920 l 7725 3900 l 7738 3880 l
 7751 3860 l 7762 3840 l 7773 3820 l 7782 3801 l 7790 3782 l
 7795 3763 l 7799 3744 l 7800 3725 l 7799 3713 l 7798 3700 l
 7795 3687 l 7791 3674 l 7786 3660 l 7779 3646 l 7772 3631 l
 7762 3616 l 7751 3601 l 7739 3585 l 7725 3569 l 7709 3552 l
 7692 3535 l 7673 3518 l 7653 3501 l 7631 3483 l 7608 3466 l
 7583 3448 l 7558 3430 l 7531 3413 l 7503 3395 l 7473 3378 l
 7443 3360 l 7412 3343 l 7379 3326 l 7346 3309 l 7311 3292 l
 7275 3275 l 7242 3260 l 7208 3245 l 7173 3229 l 7136 3213 l
 7099 3197 l 7060 3181 l 7020 3165 l 6980 3148 l 6938 3132 l
 6896 3115 l 6853 3098 l 6811 3081 l 6768 3064 l 6725 3047 l
 6683 3030 l 6642 3014 l 6601 2998 l 6562 2982 l 6524 2967 l
 6487 2952 l 6453 2938 l 6420 2924 l 6389 2911 l 6361 2899 l
 6335 2887 l 6312 2876 l 6291 2866 l 6272 2856 l 6256 2847 l
 6243 2839 l 6233 2832 l 6225 2825 l 6218 2815 l 6218 2806 l
 6226 2798 l 6241 2792 l 6262 2787 l 6287 2783 l 6317 2779 l
 6350 2775 l 6385 2772 l 6421 2768 l 6457 2763 l 6490 2758 l
 6521 2752 l 6548 2745 l 6570 2736 l 6586 2726 l 6596 2714 l
 6600 2700 l 6598 2690 l 6594 2678 l 6586 2666 l 6576 2653 l
 6563 2638 l 6547 2623 l 6528 2607 l 6506 2591 l 6482 2573 l
 6455 2556 l 6426 2537 l 6394 2519 l 6361 2500 l 6326 2482 l
 6290 2464 l 6253 2446 l 6215 2428 l 6176 2411 l 6137 2395 l
 6097 2380 l 6058 2366 l 6019 2353 l 5981 2341 l 5943 2330 l
 5906 2321 l 5870 2313 l 5835 2306 l 5800 2300 l 5763 2295 l
 5727 2292 l 5692 2291 l 5656 2290 l 5621 2291 l 5586 2293 l
 5552 2297 l 5518 2301 l 5484 2306 l 5451 2311 l 5419 2318 l
 5387 2325 l 5356 2332 l 5326 2339 l 5298 2347 l 5271 2355 l
 5245 2362 l 5220 2369 l 5197 2376 l 5176 2382 l 5156 2387 l
 5137 2391 l 5120 2395 l 5104 2398 l 5089 2399 l 5075 2400 l
 5059 2399 l 5044 2396 l 5030 2391 l 5018 2385 l 5007 2377 l
 4996 2367 l 4988 2355 l 4980 2343 l 4973 2329 l 4967 2315 l
 4963 2299 l 4959 2284 l 4956 2269 l 4954 2253 l 4952 2238 l
 4951 2224 l 4950 2210 l 4950 2198 l 4950 2186 l 4950 2175 l
 4950 2167 l 4950 2160 l 4950 2154 l 4949 2148 l 4949 2142 l
 4948 2137 l 4946 2132 l 4944 2128 l 4942 2124 l 4939 2121 l
 4935 2118 l 4931 2116 l 4926 2114 l 4920 2112 l 4913 2112 l
 4905 2111 l 4896 2111 l 4887 2111 l 4876 2112 l 4865 2113 l
 4853 2114 l 4839 2116 l 4825 2118 l 4809 2120 l 4793 2122 l
 4775 2125 l 4756 2128 l 4735 2131 l 4713 2134 l 4690 2138 l
 4665 2142 l 4638 2146 l 4611 2151 l 4582 2157 l 4553 2163 l
 4522 2169 l 4491 2176 l 4460 2184 l 4428 2192 l 4397 2201 l
 4366 2211 l 4336 2221 l 4306 2231 l 4278 2242 l 4250 2254 l
 4224 2266 l 4199 2279 l 4176 2292 l 4155 2306 l 4135 2320 l
 4117 2335 l
 cp gs /PC [[0.00 0.82 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P17 [8 0 0 -8 193.33 140.73] PATmp PATsp ef gr PATusp gs col0 s gr 
$F2psEnd
rs
end

%%EndDocument

 endTexFig
 eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
